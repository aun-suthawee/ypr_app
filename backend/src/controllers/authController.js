/* eslint-disable */
const jwt = require('jsonwebtoken');
const User = require('../models/User');

// Generate JWT token
const generateToken = (payload) => {
  return jwt.sign(payload, process.env.JWT_SECRET, {
    expiresIn: process.env.JWT_EXPIRES_IN || '24h'
  });
};

// Verify JWT token
const verifyToken = (token) => {
  return jwt.verify(token, process.env.JWT_SECRET);
};

// Login controller
const login = async (req, res) => {
  try {
    console.log('üîê Login attempt:', req.body);
    const { email, password } = req.body;

    // Validate input
    if (!email || !password) {
      console.log('‚ùå Missing email or password');
      return res.status(400).json({
        success: false,
        message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏•‡∏∞‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô'
      });
    }

    // Find user by email
    console.log('üîç Finding user:', email);
    const user = await User.findByEmail(email);
    if (!user) {
      console.log('‚ùå User not found');
      return res.status(401).json({
        success: false,
        message: '‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á'
      });
    }

    console.log('‚úÖ User found:', user.email);

    // Verify password
    console.log('üîê Verifying password...');
    const isPasswordValid = await User.verifyPassword(password, user.password);
    if (!isPasswordValid) {
      console.log('‚ùå Invalid password');
      return res.status(401).json({
        success: false,
        message: '‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á'
      });
    }

    console.log('‚úÖ Password verified');

    // Generate token
    console.log('üé´ Generating token...');
    const tokenPayload = {
      id: user.id,
      email: user.email,
      role: user.role,
      department: user.department
    };

    const token = generateToken(tokenPayload);
    console.log('‚úÖ Token generated');

    // Get user permissions
    console.log('üîë Getting user permissions...');
    const permissions = User.getUserPermissions(user.role);
    console.log('‚úÖ Permissions retrieved:', permissions);

    // Prepare user data (without password)
    const userData = {
      id: user.id,
      email: user.email,
      role: user.role,
      title_prefix: user.title_prefix,
      first_name: user.first_name,
      last_name: user.last_name,
      position: user.position,
      department: user.department,
      permissions
    };

    console.log('‚úÖ Login successful for:', user.email);
    res.json({
      success: true,
      message: '‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
      data: {
        user: userData,
        token,
        expires_in: process.env.JWT_EXPIRES_IN || '24h'
      }
    });

  } catch (error) {
    console.error('‚ùå Login error:', error);
    res.status(500).json({
      success: false,
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö'
    });
  }
};

// Get current user profile
const getProfile = async (req, res) => {
  try {
    const user = await User.findById(req.user.id);
    
    if (!user) {
      return res.status(404).json({
        success: false,
        message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ'
      });
    }

    const permissions = User.getUserPermissions(user.role);

    const userData = {
      id: user.id,
      email: user.email,
      role: user.role,
      title_prefix: user.title_prefix,
      first_name: user.first_name,
      last_name: user.last_name,
      position: user.position,
      department: user.department,
      permissions
    };

    res.json({
      success: true,
      data: { user: userData }
    });

  } catch (error) {
    console.error('Get profile error:', error);
    res.status(500).json({
      success: false,
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö'
    });
  }
};

// Logout (client-side token removal)
const logout = (req, res) => {
  res.json({
    success: true,
    message: '‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à'
  });
};

module.exports = {
  login,
  getProfile,
  logout,
  generateToken,
  verifyToken
};
